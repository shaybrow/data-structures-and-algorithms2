/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenges;

import challenges.LinkedList.LinkedList;
import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testShift(){
        int [] input = new int[] {5,6,7,8};
        int [] inputOdd = new int[] {5,6,10,7,8};
        int insert = 1;
        int[] trueOutput = Library.shiftArray(input, insert);
        int[] trueOutputOdd = Library.shiftArray(inputOdd, insert);
        int[] expectOutput = new int[]{5,6,1,7,8};
        int[] expectOutputOdd = new int[]{5,6,10,1,7,8};
        assertArrayEquals(expectOutput, trueOutput);
        assertArrayEquals(expectOutputOdd, trueOutputOdd);
    }
    @Test
    public void testBinarySearch(){
        int inputArray [] = {1,2,3,4,5,6,7};
        int inputSearch = 5;
        int expectOutput = 4;
        int trueOutput = BinarySearch.BinarySearch(inputArray,inputSearch);
        assertEquals(trueOutput,expectOutput);
        int inputArray2 [] = {1,2,3,4,5,6,7,20};
        inputSearch = 23;
        expectOutput = -1;
        trueOutput = BinarySearch.BinarySearch(inputArray,inputSearch);
        assertEquals(trueOutput,expectOutput);
    }

    @Test public void testEmptyLinkedList(){
        LinkedList trueOutput = new LinkedList();
        assertNull("", trueOutput.head);
    }
    @Test public void testLLHasValues(){
        LinkedList trueOutput = new LinkedList();

            trueOutput.addNode("something");
//        System.out.println(trueOutput);
//        System.out.println((trueOutput.includes("something")));
        assertTrue(trueOutput.includes("something"));
//        assertTrue(trueOutput.includes("something3"));
    }
    @Test public void testLLAppendBeforeAfter(){
        LinkedList trueOutput = new LinkedList();
        trueOutput.addNode("something");
        trueOutput.append("last");
        System.out.println(trueOutput);
        trueOutput.insertBefore("last","2ndlast");
        trueOutput.insertAfter("something", "2nd");
        System.out.println(trueOutput);
//        the order should be something 2nd 2ndlast and last
        String expectOutput = "something and 2nd and 2ndlast and last and NULL";
        assertEquals(expectOutput, trueOutput.toString());
}

    @Test public void testDoubleLinkedList (){
        LinkedList trueOutput = new LinkedList();
        trueOutput.addNode("something");
        trueOutput.append("last");
        trueOutput.setDoubleLinkedList();
        boolean tailExists = false;
        if (trueOutput.tail != null) tailExists = true;
        assertTrue(tailExists);

    }
    @Test public void testFindKthFromTheEnd (){
        LinkedList linkL = new LinkedList();
//        order: first, something, last
        linkL.addNode("something");
        linkL.addNode("first");
        linkL.append("last");
        String expect = "last";
        String trueO = linkL.findKthFromEnd(0);
        assertEquals(expect, trueO);
        expect = "something";
        trueO = linkL.findKthFromEnd(1);
        assertEquals(expect, trueO);
        expect = "first";
        trueO = linkL.findKthFromEnd(2);
        assertEquals(expect, trueO);

    }
    @Test public void testZipLists(){
        LinkedList linkL = new LinkedList();
        LinkedList linkL2 = new LinkedList();
        linkL.addNode("first1");
        linkL.append("second1");
        linkL.append("last1");
        linkL2.addNode("first2");
        linkL2.append("second2");
        linkL2.append("last2");
        linkL.zipListsRecursive(linkL, linkL2);
        String expect = "first1 and first2 and second1 and second2 and last1 and last2 and NULL";
        assertEquals(expect, linkL.toString());
        System.out.println(linkL);
    }

}
